import logging

try:
    import orjson

    ORJSON_AVAILABLE = True
except ImportError:
    import json

    ORJSON_AVAILABLE = False

from vdb.lib import VulnerabilitySource

logging.basicConfig(
    level=logging.INFO, format="%(levelname)s [%(asctime)s] %(message)s"
)
LOG = logging.getLogger(__name__)

json_lib = orjson if ORJSON_AVAILABLE else json


class CsafSource(VulnerabilitySource):
    def download_all(self, local_store=True):
        pass

    def download_recent(self, local_store=True):
        pass

    def fetch(self, url):
        pass

    def bulk_search(self):
        pass

    def store(self, data):
        pass

    def refresh(self):
        pass

    def convert(self, csaf_data):
        """Convert the CSAF data into Vulnerability objects"""
        ret_data = {}
        if csaf_data.get('vulnerabilities'):
            for vuln in csaf_data["vulnerabilities"]:
                references = []
                for v in vuln:
                    match_stmt = v
                    match match_stmt:
                        case 'notes':
                            for i in vuln['notes']:
                                if i.get('title') == 'Summary':
                                    description = i['text']
                                    ret_data['description'] = description
                        case 'cve':
                            cve = vuln['cve']
                            ret_data['cve_id'] = cve
                        case 'cwe':
                            cwe = vuln['cwe']['id']
                            cwe_desc = vuln['cwe']['name']
                            ret_data['cwe'] = {'id': cwe, 'name': cwe_desc}
                        case 'references':
                            for r in vuln["references"]:
                                references.append({"url": r["url"], "name": r["url"]})
                            references = json.dumps(references)
                        case 'scores':
                            for s in vuln['scores']:
                                if s.get('cvss_v3'):
                                    scores = self.convert_scores(s.get('cvss_v3'))
                                    ret_data['scores'] = scores
                        case 'product_status':
                            status = self.convert_status(vuln.get('product_status'))
                            ret_data['product_status'] = status
        return ret_data

    @staticmethod
    def convert_scores(cvss_data):
        scores = {}
        for c in cvss_data:
            match c:
                case 'vectorString':
                    scores['vectorString'] = cvss_data.get(c)
                case 'baseScore':
                    scores['baseScore'] = cvss_data.get(c)
                case 'baseSeverity':
                    scores['baseSeverity'] = cvss_data.get(c)
                case 'attackVector':
                    scores['attackVector'] = cvss_data.get(c)
                case 'attackComplexity':
                    scores['attackComplexity'] = cvss_data.get(c)
        return scores

    @staticmethod
    def convert_status(status_data):
        status = {}
        for s in status_data:
            match s:
                case 'known_affected':
                    status['known_affected'] = status_data.get(s)
                case 'known_not_affected':
                    status['known_not_affected'] = status_data.get(s)
        return status
